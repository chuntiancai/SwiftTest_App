//
//  swift中的闭包.swift
//  SwiftTest_CommandLine
//
//  Created by ctch on 2024/3/12.
//  Copyright © 2024 com.fendaTeamIOS. All rights reserved.
//
// MARK: - 笔记
/**
    1、闭包是特殊的结构体，也是函数类型。闭包在内存的存储方式也是ARC，至于闭包是存储在栈内存还是堆内存，得看闭包捕获的东西涉不涉及堆内存。
        如果闭包强引用了堆内存的东西，那闭包就存储在堆内存中，否则则存放在栈内存中。
 
        闭包的捕获行为是自动的，Swift 编译器会根据闭包使用的情况来确定哪些值需要被捕获。
        捕获列表定义了闭包可以访问的上下文，包括变量、常量、方法的参数和其他闭包。
        如果闭包没有使用任何外部上下文的值，那么它就不需要捕获任何东西，这种情况下，闭包可以被视为一个独立的函数。
        捕获值原理：本质是在堆区开辟内存空间，并将捕获值存储到这个存空间。
    
    2、函数类型返回的是一块连续的内存空间，这一块连续的内存空间存储的是Parameter类型的数据。
 
    3、闭包的优点：
        可以根据上下文推断出参数类型和返回值类型，参数名称缩写功能，通过$0，$1，$2来顺序调用闭包的参数。
 
    4、逃逸闭包：
        当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。即闭包逃离了函数的作用域。
        逃逸闭包存在的可能情况：
            当闭包被当作属性存储，导致函数完成时闭包生命周期被延长。
            当闭包异步执行，导致函数完成时闭包生命周期被延长。
            可选类型的闭包默认是逃逸闭包。

    5、闭包的循环引用场景：
        比如你一个VC中使用了闭包作为成员变量来处理数据，当时闭包的内部又不使用weak self，这就导致了VC持有了闭包，闭包也持有了VC，
        就会导致了循环引用的问题。
 
    6、闭包在堆区还是在栈区：
        如果闭包捕获的成员变量不是持久化数据，那么闭包会开辟堆区的内存空间来存储捕获到的成员变量，此时相当于一个实例对象。
        如果闭包捕获的是全局变量、常量这些持久化数据，那么闭包就相当于一个方法，放回的是一个方法的地址，它就不会开辟堆空间内存。
 */

import Foundation

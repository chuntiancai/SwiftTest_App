//
//  类型_Note.h
//  C_Syntac_CmdLine
//
//  Created by mathew on 2023/5/9.
//
//MARK: - 类型说明符
/**
    1、C语言提供了以下4种说明符，4个都属于关键字：
        short 短型 等价于 short int
        long 长型 等价于 long int
        signed 有符号型(默认)
        unsigned 无符号型
      在64位编译器环境下: short占2个字节(16位) int占4个字节(32位) long占8个字节(64位)。
      但是在16bit编译器环境下，long只占用4个字节。
     ANSI \ ISO制定了以下规则：
            char一定为为8位(1字节)， 毕竟char是我们编程能用的最小数据类型。
            short跟int至少为16位(2字节) long至少为32位(4字节) short的长度不能大于int，int的长度不能大于long。
    C语言不看数据类型怎么存的，而是看怎么取的。
 */

//MARK: - char类型
/**
    
     1、char是C语言中比较灵活的一种数据类型，称为“字符型”。共8位。
        它是用来存储字符的，因此可以将一个字符常量赋值给一个字符型变量，1个字符型变量占用1个字节，共8位，因此取值范围是-2^7~2^7-1。
        在这个范围内，你完全可以将字符型变量当做整型变量来使用，在某些字符前面加上”\”形成的字符，称为“转义字符”，比如\n、\t、\0。
         char a='a' ----->取出'a'的ASCII码值,97,然后转换2进制,存储在一个字节中。
        char字符型变量不能用来存储汉字，因为汉字不是由ASCII码表转换过来的。
        不支持多个字符,多个字符是字符串。
    
 */

//MARK: - 字符串
/**
    1、在C语言中没有专门的字符串变量,通常用一个字符数组来存放一个字符串。 所以字符串其实就是一个数组，不一定就是char数组，但一定是一个数组的地址(套用了char类型)。
    2、字符串总是以‘\0’作为串的结束符。因此当把一个字符串存入一个数组时,也把结束符‘\0’存入数组,并以此作为该字符串是否结束的标志。
       有了‘\0’标志后,就不必再用字符数组 的长度来判断字符串的长度了。
    3、有‘\0’结束标志的，是字符串。没有的，是字符数组。
    4、汉字的存储也是用char字符数组来存储，但是只是套用了char类型占用一个字节的特性。
       所以一个汉字可能是两个char(即两个字节)来存储在数组里，也可能是三个字节代表一个汉字。
       具体是用多少个字节的char来表示一个汉字，得看编译器是用GBK编码还是UTF编码之类的。
        gb2312字符集中每个汉字的索引占2个字节。 utf8字符集中，每个汉字的索引占2-4个字节。
    
 
    5、使用字符数组来保存的字符串是保存方法栈里的,保存栈里面东西是可读可写,所有我们可以改变里面的字符当把一个字符串常量赋值一个字符数组的时候,
       那么它会把字符串常量中的没有字符都放到字符数组里面。

    6、使用字符指针来保存字符串,它保存的是字符串常量地址,常量区是只读的,所以我们不可以修改字符串中的字符。
        编译的时候，编译器会把指针指向的字符串放到常量区。


 */

//MARK: - 指针
/**
    1、内存单元的指针(地址)和内存单元的内容是两个不同的概念。
       指针类型就是 内存单元的内容 是地址。
       给指针限定了数据类型，也就是 现在的内存单元的内容 只能是指向该数据类型地址。虽然所有指针的大小都是 机器字长 个bit。
    2、如何定义指针变量
        普通变量: 数据类型 变量名称;
        
        指针变量:  数据类型 * 变量名称;
        
        数据类型 : 说明将来指针变量能够保存什么类型的变量的地址
                    注意: 指针变量是什么类型, 那么将来就只能保存什么类型变量的地址,
                    例如: 指针变量是int类型, 那么将来就只能保存int类型变量的地址
        * : 在声明中，起 指针类型说明符 作用，右结合。没有任何特殊含义, 仅仅是为了标示这是一个指针变量。
        * ：在语句中，起 地址访问符 作用，右结合。访问指针变量所指向的地址，取出改地址的内存单元内容。
        & : 取址符，右结合，取出右边变量的内存单元地址。
        . : 点取值运算符，点运算符的优先级比*运算符高
        变量名称 : 用于区分不同的变量
        其实，在语句中直接访问变量也是属于一次地址访问符作用。
            * p只是二次访问地址符，即P地址的内存单元内容是地址，以p内存单元的内容作为新地址，再次去访问这个新地址内存单元内容。
            **p 是三次地址访问符。即P地址的内存单元内容是地址，以p内存单元的内容作为新地址，再次去访问这个新地址。再再次以去访问这个新地址的新新地址内存单元内容。
    
    3、指针为什么要区分类型？
        指针变量需要它所指向的数据类型告诉它要访问多少个字节存储空间。
        例如：一个int占用4个字节，一个char占用1个字节，而一个double占用8字节；
             现在只有一个地址，我怎么才能知道要从这个地址开始向后访问多少个字节的存储空间呢，是4个，是1个，还是8个？
        指针加法运算，其实就是加减一个指针类型的内存空间，以 类型的所占用的存储空间为单位 进行加减法地址运算。
 
 */
//MARK: - 数组
/**
    1、在C语言中,数组属于构造数据类型。一个数组可以分解为多个数组元素,这些数组元素可以是基本数据类型或是构造类型。
        数组: 一组具有 *相同数据类型* 的数据的有序的集合。
        数组元素: 构成数组的数据。数组中的每一个数组元素具有相同的名称,不同的下标,可以作 为单个变量使用,所以也称为下标变量。
        数组的下标: 是数组元素的位置的一个索引或指示。(从0开始)
        数组的维数: 数组元素下标的个数。根据数组的维数可以将数组分为一维、二维、三维、多维 数组。
    2、如果定义数组后,没有初始化,数组中是有值的,但是是随机的垃圾数,所以如果想要正确使用数组应该要进行初始化。也就是在定义的时候就赋值。
       定义数组的时候，因为C语言要求数组中的元素必须是同一类型，所以定义数组的时候就已经分配了对应个数的内存。
        int nums[] = {1,2,3,5,6};
        int nums[10] = {1,2};   //定义的同时对数组进行初始化,没有显式初始化的元素,那么系统会自动将其初始化为0。
*/

//MARK: - 结构体
/**
    1、C语言有两种类型，基本数据类型和构造类型。数组和结构体都是构造类型。
        在C语言中，结构体是用于存储数据的，但是不包括函数。函数和数据在C语言中区分为两种不同的类型，不能混。
        因为函数在未编译时，所需要的内存单元空间时不确定的，而结构体，在未编译的时候就已经知道其成员变量加起来的内存单元空间了。
        这和数组在定义时需要先声明元素个数是一个道理的，都是为了知道该分配多少内存单元空间。
        因为函数体里是有指令语句的，所以未编译时不能确定其占用内存空间大小，结构体和基本数据类型都是已知其数据所占用的内存空间的。
    2、
    
 */


//MARK: - 枚举
/**
    1、枚举类型就是一种基本数据类型，本质就是一个整型。
        enum　枚举名　{
            枚举元素1,
            枚举元素2,
            ……
        };

 
 */




//
//  枚举的内存分布.swift
//  TestSwift
//
//  Created by 蔡天春 on 2020/9/6.
//  Copyright © 2020 蔡天春. All rights reserved.
//

import Foundation

//Bool、Int、Double、String、Array、Dictionary这些常见类型的底层都是结构体，即是值类型
//所有结构体都有一个编译器“自动生成”的初始化器（构造方法、initializer、构造器、构造方法）
//结构体里面的成员，在swift中称做存储属性
//编译器会为结构体自动生成“多个”初始化器，目的是为了保证每一个成员都有初始值；编译器会做适当的智能调整，没有歧义就行了
//可选项都有一个默认值为nil
//一旦你自定义结构体的初始化器，那么编译器就不会再自动生成为你生成该结构体的初始化器了，一个也不会为你自动生成。
//




//结构体的内存结构
struct Point {
    var x: Int = 12
    var y: Int = 34
    var b = true
    
}

func testStruct(){
    var p = Point()
    p.x = 21
    print(MemoryLayout<Point>.size)
}

//结构体和枚举都是值类型
//类与结构体，一旦自定义了初始化器，编译器都不会自动为他们生成初始化器了


//类的内存布局（类申请堆空间，值类型原地分配内存）
//类的定义和结构体类似，但编译器并没有为类自动生成可以传入成员值的初始化器，但是可以生成无参数的构造器

//编译器自动生成无参的构造器前提是，类定义的成员中定义时有设置默认值。
//所以，如果类没有在声明变量的时候赋于默认值的话，你必须要自定义构造器在构造器方法体里给声明的变量赋值，因为编译器是不会给没有默认值的类自动生成构造器的
//所以，编译器仅仅为类自动生成一种构造器，就是声明的变量有默认值时的无参构造器，是很有限的。

//结构体是值类型（枚举也是值类型）；类是引用类型（即指针类型）
//所以结构体实例直接在栈空间中被分配整个结构体的内存空间，而类的实例则是分配一个指针的内存空间（指向堆空间）
//栈空间和堆空间是OS中的概率，通用的概念，栈是为方法分配的临时内存空间，堆是app的全局管理的内存空间的器中之一
//类的空间布局，前面16个字节存储的是类的信息（类型信息、引用计数），16个字节之后才是成员的内存分配。
//创建类的实例对象，要像堆空间申请内存的。而值类型则是直接原地分配内存;
//ios中堆内存的分配是16的倍数。

//栈空间的地址是从高到低分配的，往低地址增长

class PointClass {
    var x: Int = 12
    var y: Int = 34
}

func testClases(){
    var pclass = PointClass()
    pclass.x = 45
    var pstruct = Point()
    pstruct.x = 43
    
    var ptr  = malloc(16)   //指针变量
    print(malloc_size(ptr))
    //c语言的函数，指针所致的类的实例所占用的堆空间大小malloc_size()
    
}


//值类型赋值给var、let或者传参数给函数，都是直接将所有内容拷贝过去的。是深度拷贝，都各自占内存空间。
func testValueType(){
    struct Point{
        var x: Int
        var y: Int
    }
    var p1 = Point(x: 1, y: 3)
    var p2 = p1
    p2.x = 56
    print("\(p1)---\(p2)")
}

//全局变量，在内存中只有一份的存在，整个app唯一的内存地址；
//局部变量，随作用域生而生，作用域亡而亡；

//String、Array、Dictionary、Set都采取了cpoy on write技术，即是写时复制（写内存时才去复制，即修改内存时才去做值拷贝，不然共用）
//对于标准库值类型的赋值操作，swift确保了最佳的性能，所以你不要吝啬于赋值，随便赋值就好了。不用你来考虑值类型的拷贝性能影响

//而引用类型只是将指针拷贝了一下，或者说是将内存地址当作变量拷贝了一下而已，属于浅拷贝（shallow copy）

//let的值类型，所有内容都不可以改，因为值类型一开始所有成员就有了默认值，而且都是原地内存，let关键字是不允许修改原地内存的值
//let关键字代表着该内存地址的内容不可以修改

//class_getInstanceSize函数表示：类的对象至少需要占用多少内存
//堆空间的内存分配是16的倍数，而在缺省状态下，swift内存默认8个字节对齐
//type(of: T) T实例的类型是啥



//嵌套类型
//枚举，结构体，类里面都可以定义方法的

//方法占用对象的内存吗？
//不占用内存，只是一连串的汇编指令，放在app的代码区

//func show(Point.self){    //方法通过这种方式回访对象，建立起联系
//    print(self.x,self.y)      //所以方法是存放在代码区的，并不是放在对象的内存里，这样可以复用方法的指令逻辑流
//}











